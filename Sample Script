CREATE (p1:Person {first:'ETHAN', last:'HUNT'})
CREATE (p2:Person {first:'ETHAN', last:'HUNT'})
CREATE (p3:Person {first:'ETHAM', last:'HUNT'})
CREATE (p4:Person {first:'ETHSM', last:'HUNT'})

CREATE (p5:Person {first:'DANIEL', last:'PLAINVIEW'})
CREATE (p6:Person {first:'DANIEL', last:'PLAINVIEW'})

CREATE (d:DOBG {dob:"8/6/1993", gender:"M"})

MERGE (d)-[:HAS_RECORD]-(p1)
MERGE (d)-[:HAS_RECORD]-(p2)
MERGE (d)-[:HAS_RECORD]-(p3)
MERGE (d)-[:HAS_RECORD]-(p4)
MERGE (d)-[:HAS_RECORD]-(p5)
MERGE (d)-[:HAS_RECORD]-(p6)

MERGE (p1)-[:LEV{PCT_LAST:100.0, PCT_FIRST:100.0}]->(p2) 
MERGE (p3)-[:LEV{PCT_LAST:100.0, PCT_FIRST:80.0}]->(p1)
MERGE (p3)-[:LEV{PCT_LAST:100.0, PCT_FIRST:80.0}]->(p2)
MERGE (p4)-[:LEV{PCT_LAST:100.0, PCT_FIRST:80.0}]->(p3) 
MERGE (p4)-[:LEV{PCT_LAST:100.0, PCT_FIRST:60.0}]->(p1)
MERGE (p4)-[:LEV{PCT_LAST:100.0, PCT_FIRST:60.0}]->(p2)
MERGE (p5)-[:LEV{PCT_LAST:16.66, PCT_FIRST:0.0}]->(p4) 
MERGE (p5)-[:LEV{PCT_LAST:16.66, PCT_FIRST:0.0}]->(p3) 
MERGE (p5)-[:LEV{PCT_LAST:16.66, PCT_FIRST:0.0}]->(p1)
MERGE (p5)-[:LEV{PCT_LAST:16.66, PCT_FIRST:0.0}]->(p2)
MERGE (p5)-[:LEV{PCT_LAST:100.0, PCT_FIRST:100.0}]->(p6)
MERGE (p6)-[:LEV{PCT_LAST:16.66, PCT_FIRST:0.0}]->(p4) 
MERGE (p6)-[:LEV{PCT_LAST:16.66, PCT_FIRST:0.0}]->(p3) 
MERGE (p6)-[:LEV{PCT_LAST:16.66, PCT_FIRST:0.0}]->(p1)
MERGE (p6)-[:LEV{PCT_LAST:16.66, PCT_FIRST:0.0}]->(p2)

# View High Lev node pairs
Match (d:DOBG{dob:"8/6/1993", gender:"M"})-[h:HAS_RECORD]-(p:Person)-[l:LEV]-(p2:Person) 
where l.PCT_LAST >= 80.0 and l.PCT_FIRST >= 80.0 return d,h,p,l,p2

# Union high lev node pairs
CALL algo.unionFind.stream(
    'Match (d:DOBG{dob:"8/6/1993", gender:"M"})-[h:HAS_RECORD]-(p:Person)-[l:LEV]->(p2:Person) where l.PCT_LAST >= 80.0 and l.PCT_FIRST >= 80.0 return distinct(ID(p)) as id', 
    'Match (p1:Person)-[l:LEV]->(p2:Person) where l.PCT_LAST >= 80.0 and l.PCT_FIRST >= 80.0 return ID(p1) as source, ID(p2) as target', 
    {graph:'cypher'})
YIELD nodeId,setId
MATCH (u:User) WHERE id(u) = nodeId
RETURN u.id AS user, setId
